
```{r}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
```


## Load packages

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(readxl)
library(agricolae)
library(ggjoy)
library(drc)
library(ggpubr)
library(rstatix)
library(ec50estimator)
library(car)
library(FactoMineR)
library(factoextra)

```


# Mycelium growth

```{r message=FALSE, warning=FALSE}
mycelium <- read_excel("data/dat-fitness.xlsx", sheet = "mycelium") 

```


## Summarizing the data

```{r message=FALSE, warning=FALSE}
# Removing the mycelium plug area 
mycelium["day1"] = mycelium["d1_cm"] -0.283
mycelium["day2"] = mycelium["d2_cm"] -0.283


# Estimating the average radial growth rate (cm2 per day)
mycelium$growth <- (mycelium$day2 - mycelium$day1)


# Summarizing the data
mycelium1 <- mycelium %>%
  group_by(experiment, isolate, tri, rep) %>% summarize(mgr = mean(growth)) 

```


## Statistical analysis

```{r message=FALSE, warning=FALSE}
# Summary statistics
mycelium1 %>%
  group_by(tri) %>%
  get_summary_stats(mgr, type = "mean_sd")


# Identify outliers by groups
mycelium1 %>%
  group_by(tri) %>%
  identify_outliers(mgr) # There were no extreme outliers.


# Check normality by groups
mycelium1 %>%
  group_by(tri) %>%
  shapiro_test(mgr) # Data of the two groups are not normally distributed.

ggqqplot(mycelium1, x = "mgr", facet.by = "tri")


# Check the equality of variances
leveneTest(mgr ~ tri, data = mycelium1) 

# The p-value of the Levene’s test is > 0.05, suggesting that there is no significant difference between the variances of the two groups.


# T-test - compare the mean of two independent groups
t.test(mgr ~ tri, data = mycelium1) 

```


# Macroconidia production

```{r message=FALSE, warning=FALSE}
conidia <- read_excel("data/dat-fitness.xlsx", sheet = "conidia") 

```


## Summarizing the data
```{r message=FALSE, warning=FALSE}
conidia1 <- conidia %>%
  group_by(experiment, isolate, tri, rep) %>% summarize(spores = mean(conc_spores))

```


## Statistical analysis

```{r message=FALSE, warning=FALSE}
# Summary statistics
conidia1 %>%
  group_by(tri) %>%
  get_summary_stats(spores, type = "mean_sd")


# Identify outliers by groups
conidia1 %>%
  group_by(tri) %>%
  identify_outliers(spores) # There were no extreme outliers.


# Check normality by groups
conidia1 %>%
  group_by(tri) %>%
  shapiro_test(spores) # Data of the two groups are not normally distributed.

ggqqplot(conidia1, x = "spores", facet.by = "tri")


# Check the equality of variances
leveneTest(spores ~ tri, data = conidia1) 

# The p-value of the Levene’s test is > 0.05, suggesting that there is no significant difference between the variances of the two groups.


# T-test - compare the mean of two independent groups
t.test(spores ~ tri, data = conidia1) 


```

# Ascospore production

```{r message=FALSE, warning=FALSE}
ascospore <- read_excel("data/dat-fitness.xlsx", sheet = "ascospore") 

```


## Summarizing the data

```{r message=FALSE, warning=FALSE}

ascospore1 <- ascospore %>%
  group_by(experiment, isolate, tri, location, region, crop, rep) %>% summarize(ascospore = mean(conc_spores)) 

```


## Statistical analysis

```{r message=FALSE, warning=FALSE}
# Summary statistics
ascospore1 %>%
  group_by(tri) %>%
  get_summary_stats(ascospore, type = "mean_sd")


# Identify outliers by groups
ascospore1 %>%
  group_by(tri) %>%
  identify_outliers(ascospore) # There were no extreme outliers.


# Check normality by groups
ascospore1 %>%
  group_by(tri) %>%
  shapiro_test(ascospore) # Data of the two groups are not normally distributed.

ggqqplot(ascospore1, x = "ascospore", facet.by = "tri")


# Check the equality of variances
leveneTest(ascospore ~ tri, data = ascospore1) 

# The p-value of the Levene’s test is > 0.05, suggesting that there is no significant difference between the variances of the two groups.


# T-test - compare the mean of two independent groups
t.test(ascospore ~ tri, data = ascospore1) 


```

# Perithecia production

```{r message=FALSE, warning=FALSE}
peritecia <- read_excel("data/dat-fitness.xlsx", sheet = "perithecia")

```


## Summarizing the data

```{r message=FALSE, warning=FALSE}

peritecia1 = peritecia %>%
  gather("Day 3", "Day 6", key = day, value = percentage) %>% 
  arrange(isolate)

```


## Statistical analysis

```{r message=FALSE, warning=FALSE}

################################# DAY 3 ####################################

day3 <- peritecia1 %>%
  filter(day == "Day 3")


# Summary statistics
day3 %>%
  group_by(tri) %>%
  get_summary_stats(percentage, type = "mean_sd")

day_3_summary <- day3 %>%
  group_by(tri, isolate) %>%
  get_summary_stats(percentage, type = "mean_sd")


# Identify outliers by groups
day3 %>%
  group_by(tri) %>%
  identify_outliers(percentage) # The 18SG178iii is an extreme outlier.


# Check normality by groups
day3 %>%
  group_by(tri) %>%
  shapiro_test(percentage) # Data of the two groups are not normally distributed.

ggqqplot(day3, x = "percentage", facet.by = "tri")


# Check the equality of variances
leveneTest(percentage ~ tri, data = day3) 

# The p-value of the Levene’s test is > 0.05, suggesting that there is no significant difference between the variances of the two groups.


# T-test - compare the mean of two independent groups - With outlier
t.test(percentage ~ tri, data = day3) 



################################# DAY 6 ####################################

day6 <- peritecia1 %>%
  filter(day == "Day 6")


# Summary statistics
day6 %>%
  group_by(tri) %>%
  get_summary_stats(percentage, type = "mean_sd")


# Identify outliers by groups
day6 %>%
  group_by(tri) %>%
  identify_outliers(percentage) # There were no extreme outliers.

day_6_summary <- day6 %>%
  group_by(tri, isolate) %>%
  get_summary_stats(percentage, type = "mean_sd")


# Check normality by groups
day6 %>%
  group_by(tri) %>%
  shapiro_test(percentage) # Data of the two groups are not normally distributed.

ggqqplot(day6, x = "percentage", facet.by = "tri")


# Check the equality of variances
leveneTest(percentage ~ tri, data = day6) 

# The p-value of the Levene’s test is > 0.05, suggesting that there is no significant difference between the variances of the two groups.


# T-test - compare the mean of two independent groups - With outlier
t.test(percentage ~ tri, data = day6) 


#### Compare two evaluation days
t.test(percentage ~ day, data = peritecia1)

```


# Fungicide sensitivity

```{r message=FALSE, warning=FALSE}
fungicide <- read_excel("data/dat-fitness.xlsx", sheet = "fungicide")

```


## Removing the plug diameter

```{r message=FALSE, warning=FALSE}
fungicide1 <- fungicide %>%
  mutate(day1 = d1-6,
         day2 = d2-6,
         mgr =  day2-day1) %>%
  group_by(experiment, fungicide, isolate, tri, dose, rep) %>%
  summarize(mgr = mean(mgr)) 

```


## EC50 estimation

```{r message=FALSE, warning=FALSE}

ec50 = estimate_EC50(mgr~dose,
                        data =fungicide1,
                        isolate_col = "isolate", 
                        strata_col =  c("tri","fungicide"),
                        interval = "delta",
                        fct = LL.4())

ec50 <- ec50 %>%
  rename(
    isolate = ID)

## Export data
write.csv(ec50, file = "data/ec50.csv")

```




## Statistical analysis - TEB

```{r message=FALSE, warning=FALSE}
## Tebuconazole
ec50_teb <- ec50 %>%
  filter(fungicide =="Tebuconazole")

ec50_teb %>%
  get_summary_stats(Estimate, type = "full")


## 3ADON genotype
teb_3adon <- ec50_teb %>%
  filter(tri == "3ADON") 

## 15ADON
teb_15adon <- ec50_teb %>%
  filter(tri == "15ADON")

## Kolmogorov-Smornov test

#H0 = equal distribution
#H1 = different distributions

ks.test(teb_3adon$Estimate, teb_15adon$Estimate, alternative = "two.side")


```

## Statistical analysis - MET

```{r message=FALSE, warning=FALSE}
## Metconazole
ec50_met <- ec50 %>%
  filter(fungicide =="Metconazole")

ec50_met %>%
  get_summary_stats(Estimate, type = "full")

## 3ADON genotype
met_3adon <- ec50_met %>%
  filter(tri == "3ADON") 

## 15ADON
met_15adon <- ec50_met %>%
  filter(tri == "15ADON")

## Kolmogorov-Smornov test

#H0 = equal distribution
#H1 = different distributions

ks.test(met_3adon$Estimate, met_15adon$Estimate, alternative = "two.side")


## Compare the two fungicides estimates

ks.test(ec50_teb$Estimate, ec50_met$Estimate, alternative = "two.side")


```


# Multivariate analysis

## Combining the data

```{r message=FALSE, warning=FALSE}
dat1_mycelium <- mycelium1 %>% 
  group_by(isolate, tri) %>% 
  summarise(growth = mean(mgr))

dat1_macroconidia <- conidia1 %>% 
  group_by(isolate, tri) %>% 
  summarise(conidia = mean(spores))

dat1_ascospore <- ascospore1 %>% 
  group_by(isolate, tri) %>% 
  summarise(ascospore = mean(ascospore))


dat1_perith_1 <- peritecia1  %>%
  filter(day == "Day 3") %>% 
  group_by(isolate, tri) %>% 
  summarise(perit_day3 = mean(percentage))


dat1_perith_2 <- peritecia1 %>%
  filter(day == "Day 6") %>% 
  group_by(isolate, tri) %>% 
  summarise(perit_day6 = mean(percentage))


dat1_ec50_teb <- ec50_teb %>% 
  group_by(isolate, tri) %>% 
  summarise(ec50_teb = mean(Estimate))

dat1_ec50_met <- ec50_met %>% 
  group_by(isolate, tri) %>% 
  summarise(ec50_met = mean(Estimate))

dat_multivar <- dat1_mycelium %>% 
  left_join(., dat1_macroconidia) %>% 
  left_join(., dat1_ascospore) %>% 
  left_join(., dat1_perith_1) %>% 
  left_join(., dat1_perith_2) %>% 
  left_join(., dat1_ec50_teb) %>% 
  left_join(.,dat1_ec50_met) %>%   
  ungroup()

## Export data
write.csv(dat_multivar, file = "data/dat_multivar.csv")

```


## MANOVA

```{r message=FALSE, warning=FALSE}

model <- lm(cbind(growth, conidia, ascospore, perit_day3, perit_day6, ec50_teb, ec50_met) ~ tri, dat_multivar)
Manova(model, test.statistic = "Pillai")
Manova(model, test.statistic = "Wilks")
Manova(model, test.statistic = "Hotelling")
Manova(model, test.statistic = "Roy")

#There was no statistically significant difference between the trichothecene genotype on the combined dependent variables

```

## PCA - Eigenvalues

```{r message=FALSE, warning=FALSE}

# Selecting only the dependent variables

dat_multivar_pca <- dat_multivar %>% 
  select(-isolate) %>% 
  select(-tri)

res.pca <- PCA(dat_multivar_pca, graph = FALSE)


# Eigenvalues / Variances

## The eigenvalues measure the amount of variation retained by each principal component. 
## Eigenvalues are large for the first PCs and small for the subsequent PCs.


eig.val <- get_eigenvalue(res.pca)
eig.val


fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 40))

## From the plot below, we might want to stop at the fourth principal component. > 85% of the information (variances) contained in the data are retained by the first four principal components.


```

## Contributions of variables to PCs

```{r}
var <- get_pca_var(res.pca)
var

# Contributions to the principal components

var$contrib #contains the contributions (in percentage) of the variables to the principal components. The contribution of a variable (var) to a given principal component is (in percentage) : (var.cos2 * 100) / (total cos2 of the component).


# The larger the value of the contribution, the more the variable contributes to the component.

```




## Corr - Supplementary Figure 01

```{r message=FALSE, warning=FALSE}
library(corrgram)
library(corrplot)

corr <- dat_multivar %>%
  select(-tri) %>%
  select(-isolate)

corr1 <- corr %>%
  corrgram(lower.panel=panel.cor, upper.panel=panel.conf,
         diag.panel=panel.density)


M <- cor(corr1, use = "pairwise.complete.obs")
M

## Combining correlogram with the significance test

# mat : is a matrix of data
# ... : further arguments to pass to the native R cor.test function
cor.mtest <- function(mat, ...) {
    mat <- as.matrix(mat)
    n <- ncol(mat)
    p.mat<- matrix(NA, n, n)
    diag(p.mat) <- 0
    for (i in 1:(n - 1)) {
        for (j in (i + 1):n) {
            tmp <- cor.test(mat[, i], mat[, j], ...)
            p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
        }
    }
  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
  p.mat
}

# matrix of the p-value of the correlation
p.mat <- cor.mtest(M)


corrplot(M, method = "number", type = "upper", p.mat = p.mat, sig.level = 0.01#, insig = "blank"
         )
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))




png(height=2000, width=2500, file="figures/corr1.png", res = 300)
corrplot(M, method="color", col=col(200),  
         type="upper", #order="hclust", 
         is.corr = T,
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         # Combine with significance
         p.mat = p.mat, sig.level = 0.05, insig = "blank", 
         # hide correlation coefficient on the principal diagonal
         diag=FALSE)
dev.off()

```


